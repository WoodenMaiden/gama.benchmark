name: Benchmarking

on:
  workflow_dispatch:

env:
  REPORT_FILE: results.zip
  DEBIAN_FRONTEND: noninteractive

jobs:
  benchmark:
    strategy:
      fail-fast: false
      matrix:
        runner: 
          - ubuntu-20.04
          - macos-13 
          # - windows-2022

    name: ${{ matrix.runner }}
    runs-on: ${{ matrix.runner }}

    steps:
      - uses: actions/checkout@v3

      - name: Install Gama or restore it from cache
        id: install_gama
        uses: ./.github/crossplatform_actions/setup_gama
        with:
          release: 1.9.2

      - name: Install jq
        uses: dcarbone/install-jq-action@v1.0.1

      - name: Install R
        uses: r-lib/actions/setup-r@v2
      - uses: r-lib/actions/setup-tinytex@v2

      - name: Install R packages
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 1
          working-directory: R

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Gradle Build Action
        uses: gradle/gradle-build-action@v2.7.1
        with:
          gradle-version: current


      - name: Run experiments
        working-directory: JMX
        id: benchmark
        shell: bash
        env: 
          METRICS_FILE: ${{ runner.temp }}/results/results.csv
          OUTPUT_DIR: ${{ runner.temp }}/results
          
          JAVA_HOME: ${{ steps.install_gama.outputs.java_home }}
          JAVA: ${{ steps.install_gama.outputs.java_exec }}
          TARGET_EQUINOX_CP: ${{ steps.install_gama.outputs.target_equinox }}
          HEADLESS_CONF: ${{ steps.install_gama.outputs.conf_file }}


          # the < /dev/null part prevents gradle from consuming input as it stops the experiment loop early 
          # the '2>&1 | tee -a x' part allows us to pipe both stdout and stderr to a log file
        run: |
          set -e
          
          echo "Let's get started!"
          echo "JAVA_HOME: $JAVA_HOME"
          echo "JAVA: $JAVA"

          "$JAVA" -version

          echo "TARGET_EQUINOX_CP: $TARGET_EQUINOX_CP"
          echo "HEADLESS_CONF: $HEADLESS_CONF"

          mkdir "$OUTPUT_DIR"
          echo '"Experiment name","N","CPU load","Memory consumed (bytes)","Execution time (ms)"' > "$METRICS_FILE"
          
          jq -c '.[]' ../benchmark_targets.json | while read usecase; do
            echo "$( echo $usecase | jq -r '.["useCase"]')" | tee -a ${{ runner.temp }}/log
            echo "==========================" | tee -a ${{ runner.temp }}/log
            number_of_runs=$(echo "$usecase" | jq -r '.["numberOfRuns"]')
            
            echo "$usecase" | jq -c '.["experimentsFiles"][]' | while read experiment; do
              echo "$experiment"
              experiment_file="../$(echo $experiment | jq -r '.["filename"]')"
              N=$(echo "$experiment" | jq -r '.["N"]')
              experiment_name=$(echo "$experiment" | jq -r '.["experimentName"]')
          
              for i in $(seq 1 $number_of_runs); do
                sudo lsof -i
                echo -e "\t $(echo $experiment | jq -r '.["filename"]'): $i/$number_of_runs"
                passWork=${{ runner.temp }}/.workspace$(sudo find ${{ runner.temp }} -name ".workspace*" | wc -l)

                sleep 1
        
                result_file=$(sudo gradle run \
                  --args="$JAVA -Dcom.sun.management.jmxremote -cp $TARGET_EQUINOX_CP -Djava.awt.headless=true org.eclipse.core.launcher.Main -configuration $HEADLESS_CONF -application msi.gama.headless.product -data $passWork $experiment_file ${{ runner.temp }}" \
                  < /dev/null 2>&1 | tee -a ${{ runner.temp }}/log | grep "Result File:" | cut -d':' -f2)
          
                sudo cat $result_file | jq -r '"\"$experiment_name\",$N,\(.["cpuLoad"]),\(.["totalMemoryUsed"]),\(.["duration"])"' >> "$METRICS_FILE"
              done
            done 
          done

          echo "metrics_file=${METRICS_FILE}" >> "$GITHUB_OUTPUT"
          
          echo "Done!" 

      - name: Knit Rmarkdown report
        working-directory: R
        run: |
          Rscript -e 'rmarkdown::render(
            "report.Rmd",
            params = list( 
              gha_runner = "${{ matrix.runner }}", 
              metrics_report_file = "${{ steps.benchmark.outputs.metrics_file }}"
            ),  
            output_format = "all", 
            output_dir = "${{ runner.temp }}/results"
          )'
          mv *.png ${{ runner.temp }}/results

      - name: Upload results4
        if: ${{ !env.ACT }} # skip during local actions testing
        uses: actions/upload-artifact@v3
        env:
          OUTPUT_DIR: ${{ runner.temp }}/results
        with:
          name: ${{ matrix.runner }}-results
          path: ${{ env.OUTPUT_DIR }}

      - name: Logs of all the benchmark runs
        if: always()
        run: |
          cat ${{ runner.temp }}/log