name: Benchmarking

on:
  workflow_dispatch:

env:
  JAVA_HOME: /opt/gama-platform/jdk
  METRICS_FILE: /tmp/results/results.csv
  REPORT_FILE: /tmp/results.zip
  HEADLESS_CONF: /opt/gama-platform/headless/configuration
  DEBIAN_FRONTEND: noninteractive

jobs:
  benchmark:
    name: Benchmarking
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3

      - name: Install jq
        uses: dcarbone/install-jq-action@v1.0.1

      - name: Install R
        uses: r-lib/actions/setup-r@v2
      - uses: r-lib/actions/setup-tinytex@v2

      - name: Install R packages
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache-version: 1
          working-directory: R

      - uses: r-lib/actions/setup-pandoc@v2

      - name: Gradle Build Action
        uses: gradle/gradle-build-action@v2.7.1
        with:
          gradle-version: current

      - name: Install Gama
        shell: bash
        working-directory: /tmp
        run: |
          wget --show-progress https://github.com/gama-platform/gama/releases/download/1.9.1/GAMA_1.9.1_Linux_with_JDK.deb 
          sudo dpkg -i GAMA_1.9.1_Linux_with_JDK.deb
          PATH="$PATH:/opt/gama-platform/jdk/bin"


      - name: Run experiments
        working-directory: JMX
        shell: bash
        run: |
          set -e
          export TARGET_EQUINOX_CP=$(ls /opt/gama-platform/plugins/org.eclipse.equinox.launcher*.jar)
          
          mkdir $(dirname "$METRICS_FILE")
          echo '"Experiment name","N","CPU load","Memory consumed (bytes)","Execution time (ms)"' > "$METRICS_FILE"
          
          jq -c '.[]' ../benchmark_targets.json | while read usecase; do
            echo "$( echo $usecase | jq -r '.["useCase"]')"
            echo "=========================="
            number_of_runs=$(echo "$usecase" | jq -r '.["numberOfRuns"]')
            
            echo "$usecase" | jq -c '.["experimentsFiles"][]' | while read experiment; do
              echo "$experiment"
              experiment_file="../$(echo $experiment | jq -r '.["filename"]')"
              N=$(echo "$experiment" | jq -r '.["N"]')
              experiment_name=$(echo "$experiment" | jq -r '.["experimentName"]')
          
              for i in $(seq 1 $number_of_runs); do
                echo -e "\t $(echo $experiment | jq -r '.["filename"]'): $i/$number_of_runs"
                passWork=/tmp/.workspace$(sudo find /tmp -name ".workspace*" | wc -l)
        
                result_file=$(gradle run \
                  --args="java -cp $TARGET_EQUINOX_CP -Djava.awt.headless=true org.eclipse.core.launcher.Main -configuration $HEADLESS_CONF -application msi.gama.headless.product -data $passWork $experiment_file /tmp" \
                  < /dev/null | grep "Result File:" | cut -d':' -f2) # the < /dev/null part prevents gradle from consuming input as it stops the experiment loop early 
          
                echo "\"$experiment_name\",$N,$(jq -r '.["cpuLoad"]' $result_file),$(jq -r '.["totalMemoryUsed"]' $result_file),$(jq -r '.["duration"]' $result_file)" >> "$METRICS_FILE"
              done
            done 
          done
          
          echo "Done!" 

      - name: Knit Rmarkdown report
        working-directory: R
        run: |
          Rscript -e 'rmarkdown::render("report.Rmd", output_format = "all", output_dir = "/tmp/results")'
          mv *.png /tmp/results

      - name: Zip results
        shell: bash
        run: |
          zip -r "$REPORT_FILE" $(dirname "$METRICS_FILE")

      - name: Upload results4
        if: ${{ !env.ACT }} # skip during local actions testing
        uses: actions/upload-artifact@v3
        with:
          name: results.zip
          path: ${{ env.REPORT_FILE }}